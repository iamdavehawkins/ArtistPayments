@page "/"
@using System.IO
@using Newtonsoft.Json
@using System.Text.Json

<div class="page-header">
    <h3>Streaming Artist Payments</h3>
</div>

<EditForm Model="configSelections">
    <div class="row text-center">
        <div class="form-group col-md-12">
            <label for="jsonUploader" class="lead form-text">
                Upload files (e.g. StreamingHistory0.json)
            <InputFile id="jsoUploader" OnChange="@OnInputFileChange" multiple />
            </label>
            <p>
                If you don't have your data, you can request it from Spotify <a href="https://www.spotify.com/ca-en/account/privacy/" target="_blank">here</a>.
                None of your data is uploaded to our servers or visible to us in any way.
            </p>
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-12">
            <h4 class="text-center">Assumptions</h4>
            <p class="lead text-center">
                Assuming a 12 month subscription of
            <InputSelect id="subscriptionSelect" @bind-Value="configSelections.monthlySubscriptionCost">
                <option selected value="9.99">Individual ($9.99/mo)</option>
                <option value="12.99">Duo ($12.99/mo)</option>
                <option value="14.99">Family ($14.99/mo)</option>
                <option value="4.99">Student ($4.99/mo)</option>
            </InputSelect>
                and that artists are paid
            <span style="font-weight: bolder;">$</span><InputNumber id="payPerStreamSelect" @bind-Value="configSelections.payPerStream" step="0.001" />
                per stream
            </p>
        </div>
    </div>
</EditForm>

@{
    var totalCost = Decimal.Round(12 * configSelections._monthlySubscriptionCost, 2);
    var totalPaidToArtists = Decimal.Round(totalListens * configSelections.payPerStream, 2);
    var totalPaidToSpotify = totalCost - totalPaidToArtists;
    var percentPaidToArtists = Decimal.Round(totalPaidToArtists / totalCost * 100, 2);
    var percentPaidToSpotify = Decimal.Round(totalPaidToSpotify / totalCost * 100, 2);
}

<div class="container">
    <div class="row">
        <div class="col-sm">
            <p class="h2 text-center">You listened to @totalListens.ToString("N0") tracks and paid a total of $@totalCost.</p>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-sm">
            <BigStatBoard BoardTitle="Artists" Total="@totalPaidToArtists" Percent="@percentPaidToArtists" />
        </div>
        <div class="col-sm">
            <BigStatBoard BoardTitle="Spotify" Total="@totalPaidToSpotify" Percent="@percentPaidToSpotify" />
        </div>
    </div>
</div>

<ListenTable AllListens="@allListens" PayPerStream=@configSelections.payPerStream/>


<Footer />


@code {
    public string fileContents = "nothing yet";
    public int totalListens = 0;
    public List<Listen> allListens = new List<Listen>();
    public ConfigSelections configSelections = new ConfigSelections();

    public async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        var options = new JsonSerializerOptions()
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };
        foreach (var file in e.GetMultipleFiles())
        {
            var fileStream = file.OpenReadStream(maxAllowedSize: 2048 * 1000);
            allListens.AddRange(await System.Text.Json.JsonSerializer.DeserializeAsync<List<Listen>>(fileStream, options));
        }
        totalListens = allListens.Count;
        StateHasChanged();
    }
}
